''''Use this program to generate all references needed to run a spectra sensor validation.'''

from humref import spectra_equiv
import ADC
import pdb


## GUI application------------------------------------------------------------------
from PyQt5 import QtCore, QtGui, QtWidgets
import sys


## The following allows you to access the auto-generated gui from pyuic5
import basic_GUI as gui
class MainUiClass(QtWidgets.QMainWindow, gui.Ui_MainWindow):
    def __init__(self, parent=None):
        # super(MainUiClass, self).__init__(parent)
        super().__init__(parent)
        self.setupUi(self)
#----------------------------------------------------------------------------------

        # Initialize variables
        self.pressure = None  # psi, reference static pressure (set to SL press for now)
        self.temperature = None   # degF, reference static temperature
        self.setTP()   # set initial values
        self.old_pressure = self.pressure   # in case of needing to revert
        self.old_temperature = self.temperature  # in case of needing to revert

        self.thread = None
        self.DDitems = ['Dew Point','Mass Mixing Ratio','Relative Humidity','Counts','Voltage']
        self.boxes = [self.HumGenDDbox1, self.HumGenDDbox2, self.HumGenDDbox3]
        self.units = [self.HumGenUnits1, self.HumGenUnits2, self.HumGenUnits3]
        self.LCDs = [self.HumGenLCD1, self.HumGenLCD2, self.HumGenLCD3]

        # Window setup information that doesn't get auto-generated by pyuic5
        icon = QtGui.QIcon('icon.jpg')
        self.setWindowIcon(icon)  # set the icon in the upper left corner of window
        self.addDDOptions()   # add options to dropdown boxes
        self.updateBackgroundConditions()   # set temperature and pressure based on input
        self.defaultDD()   # set default dropdowns

        # Initialize instance of DI-145
        self.s = ADC.DataQ_DI145()

        # Connect update activity
        self.updateDDBoxes()
        self.updateHumGenButtons()
        self.closeProgram()
        


    def addDDOptions(self):
        for box in self.boxes:
            box.addItems(self.DDitems)

    def defaultDD(self):
        self.HumGenDDbox1.setCurrentIndex(1)  # box1 = MMR
        self.HumGenDDbox2.setCurrentIndex(0)  # box2 = dew point
        self.HumGenDDbox3.setCurrentIndex(2)  # box3 = relative humidity

        # Update the units for each label
        for box, unit in zip(self.boxes, self.units):
            self.updateUnits(box.currentText(), unit)

    def scanClicked(self):
        self.s.scan()    # Start scan

        # Start thread
        try:
            ## Group of Code base on https://www.youtube.com/watch?v=eYJTcLBQKug
            self.thread = self.s
            self.thread.change_value.connect(self.updateLCD)
            self.thread.start()
            #---------------------------------------------------------------------------------
            print('Thread started')
        except:
            print('Thread NOT started')

    def stopClicked(self):
        self.s.sts()    # Stop scan

        # Stop thread
        try:
            self.thread.stop_thread = True
            self.thread.exit()
            print('Thread stopped')
        except:
            print('Could NOT stop thread')

    def setTP(self):
        checkP = float(self.PressureEdit.text())
        checkT = float(self.TemperatureEdit.text())

        def error_msg():
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText('Error')
            msg.setWindowTitle('Error')
            return msg


        # Check pressure
        if 0 < checkP <= 50:
            self.pressure = checkP
        else:
            self.pressure = self.old_pressure
            self.PressureEdit.setText(str(self.pressure))

            msg = error_msg()
            msg.setInformativeText('{} psia is NOT in the range 0-50 psia'.format(checkP))
            msg.exec_()

        # Check temperature
        if -200 <= checkT <= 200:
            self.temperature = checkT
        else:
            self.temperature = self.old_temperature
            self.TemperatureEdit.setText(str(self.temperature))

            msg = error_msg()
            msg.setInformativeText('{} °F is NOT in the range -200-200 °F'.format(checkT))
            msg.exec_()

        self.old_pressure = self.pressure
        self.old_temperature = self.temperature

    def updateBackgroundConditions(self):
        self.SetConditionsButton.clicked.connect(self.setTP)

    def updateHumGenButtons(self):
        self.StartButton.clicked.connect(self.scanClicked)
        self.StopButton.clicked.connect(self.stopClicked)

    def updateDDBoxes(self):
        for box, unit in zip(self.boxes, self.units):
            box.activated[str].connect(
               lambda text, unit=unit: self.updateUnits(text, unit))

    def updateUnits(self, text, unit):
        unit.setFont(QtGui.QFont('Arial', 24))
        if text == 'Dew Point':
            unit.setText('°F')
        elif text == 'Mass Mixing Ratio':
            unit.setText('kgH2O/kgAir')
        elif text == 'Relative Humidity':
            unit.setText('%')
        elif text == 'Counts':
            unit.setText('')
        elif text == 'Voltage':
            unit.setText('V')

    def updateLCD(self, counts):
        # Calculate various atmospheric conditions
        voltage = 0.0003*counts
        TddegC = voltage*10
        TddegF = TddegC*1.8 + 32
        TK = (self.temperature-32)*5/9 + 273.15
        TdK = TddegC + 273.15
        pPa = self.pressure / (spectra_equiv.KPA2PSI/1000)
        mmr = spectra_equiv.humidity_ratio(TK, TdK, pPa)
        rh = spectra_equiv.relative_humidity2(TK, TdK, pPa)*100

        # Set each LCD to the respective value based on combobox selection
        for lcd, box in zip(self.LCDs, self.boxes):
            box_val = str(box.currentText())
            if box_val == self.DDitems[0]:  # Dew point
                lcd.display('{:.2f}'.format(round(TddegF, 2)))
            elif box_val == self.DDitems[1]:  # Mass mixing ratio
                lcd.display('{:.5f}'.format(round(mmr, 5)))
            elif box_val == self.DDitems[2]:  # Relative humidity
                lcd.display('{:.2f}'.format(round(rh, 2)))
            elif box_val == self.DDitems[3]:  # Counts
                lcd.display('{0:d}'.format(int(counts)))
            elif box_val == self.DDitems[4]:  # Voltage
                lcd.display('{:.3f}'.format(round(voltage, 3)))

    def closeProgram(self):
        # self.CloseButton.clicked.connect(QtWidgets.QApplication.instance().quit)  # close program with button
        self.CloseButton.clicked.connect(QtWidgets.qApp.quit)  # close program with button



if __name__=='__main__':
    a = QtWidgets.QApplication(sys.argv)
    app = MainUiClass()
    app.show()
    sys.exit(a.exec_())
